globals = @
#isDefined = false
#hash = null
#createHash = () ->
#  isDefined = false
#  try
#    hash = new Crypto.SHA256
#      chunkSize: globals.chunkSize
#    isDefined = true
#
pdf = null
fileLoaded = false

queue = []

Tinytest.addAsync 'Checking package visibility', (test, onComplete) ->
  queue.push () ->
    createHash()
    test.isTrue isDefined, "Crypto.SHA256 is not defined"
    test.isTrue Package['sha256'].Crypto.SHA256, "Package.sha256.Crypto.SHA256 is not defined"
    onComplete()
  processQueue()

Tinytest.addAsync 'Check file size', (test, onComplete) ->
  queue.push () ->
    test.equal pdf.byteLength, pdfByteLength
    onComplete()
  processQueue()

Tinytest.addAsync 'Send complete file, check hash', (test, onComplete) ->
  queue.push () ->
    createHash()
    hash.update
      data: pdf   # Send complete file to Crypto
    hash.finalize
      onDone: (sha256) ->
        console.log sha256
        test.equal sha256, pdfHash
        onComplete()
  processQueue()

Tinytest.addAsync 'Send file in regular chunks, check hash', (test, onComplete) ->
  queue.push () ->
    createHash()
    globals.chunkStart = 0
    while globals.chunkStart < pdf.byteLength
      globals.sendChunk
        pdf: pdf,
        hash: hash
    hash.finalize
      onDone: (sha256) ->
        test.equal sha256, pdfHash
        onComplete()
  processQueue()

Tinytest.addAsync 'Send file in irregular chunks, check hash', (test, onComplete) ->
  queue.push () ->
    createHash()
    globals.chunkStart = 0
    while globals.chunkStart < pdf.byteLength
      globals.sendChunk
        pdf: pdf,
        hash: hash,
        random: 1
    hash.finalize
      onDone: (sha256) ->
        test.equal sha256, pdfHash
        onComplete()
  processQueue()

Tinytest.addAsync 'Check progress callback', (test, onComplete) ->
  round = (number) ->
    Math.round(number, "e+5")
  queue.push () ->
    createHash()
    chunkCount = pdf.byteLength / globals.chunkSize
    progressStep = 1 / chunkCount
    expectedProgress = 0
    hash.update
      data: pdf
      onProgress: (progress) ->
        expectedProgress += progressStep
        expectedProgress = 1 if expectedProgress > 1
        test.equal round(progress), round(expectedProgress)
    hash.finalize
      onDone: (sha256) ->
        onComplete()
  processQueue()

# Process queue
processQueue = () ->
  return if not fileLoaded
  test pdf while test = queue.shift()

# Download file
pdfPath = "#{ testRoot }/#{ pdfFilename }?" + Math.random()
oReq = new XMLHttpRequest
oReq.open "GET", pdfPath, true
oReq.responseType = 'arraybuffer'
oReq.onload = (oEvent) ->
  pdf = oReq.response
  fileLoaded = true
  processQueue()
oReq.send null

